// <auto-generated />
using System;
using ArcaneArchivist.WebApi.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArcaneArchivist.WebApi.Persistence.Migrations
{
    [DbContext(typeof(MagicCardDbContext))]
    [Migration("20240128182700_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArcaneArchivist.WebApi.Entity.MagicCard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Collection")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Edition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("Toughness")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MagicCards");
                });

            modelBuilder.Entity("ArcaneArchivist.WebApi.Entity.MagicCard", b =>
                {
                    b.OwnsOne("ArcaneArchivist.WebApi.Entity.ManaCost", "ManaCost", b1 =>
                        {
                            b1.Property<Guid>("MagicCardId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MagicCardId");

                            b1.ToTable("MagicCards");

                            b1.ToJson("ManaCost");

                            b1.WithOwner()
                                .HasForeignKey("MagicCardId");

                            b1.OwnsMany("ArcaneArchivist.WebApi.Entity.ManaCostColor", "ManaColors", b2 =>
                                {
                                    b2.Property<Guid>("ManaCostMagicCardId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<int>("Color")
                                        .HasColumnType("int");

                                    b2.Property<int>("Quantity")
                                        .HasColumnType("int");

                                    b2.HasKey("ManaCostMagicCardId", "Id");

                                    b2.ToTable("MagicCards");

                                    b2.WithOwner()
                                        .HasForeignKey("ManaCostMagicCardId");
                                });

                            b1.Navigation("ManaColors");
                        });

                    b.Navigation("ManaCost")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
